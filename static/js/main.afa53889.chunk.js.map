{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/COVID.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","gutterBottom","infectedTextColor","variant","start","end","value","duration","separator","color","Date","toDateString","recoveredTextColor","deathsTextColor","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","onChange","e","target","i","key","App","setData","result","fetchedData","image","src","coronaImage","alt","Object","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afa53889.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__jza8Y\",\"card\":\"Cards_card__s5qF8\",\"infected\":\"Cards_infected__3QaW0\",\"infectedTextColor\":\"Cards_infectedTextColor__2Hein\",\"recovered\":\"Cards_recovered__g3DeY\",\"recoveredTextColor\":\"Cards_recoveredTextColor__2TzZo\",\"deaths\":\"Cards_deaths__348yN\",\"deathsTextColor\":\"Cards_deathsTextColor__2TgU8\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./Cards.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              gutterBottom\r\n              className={styles.infectedTextColor}\r\n              variant=\"h5\"\r\n            >\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={styles.recoveredTextColor}\r\n              variant=\"h5\"\r\n              gutterBottom\r\n            >\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={styles.deathsTextColor}\r\n              variant=\"h5\"\r\n              gutterBottom\r\n            >\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nCards.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (err) {}\r\n};\r\n\r\nconst fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport { fetchData, fetchDailyData, fetchCountries };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Chart.js useEffect called\");\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"infected\", \"recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5)\",\r\n              \"rgba(0,255,0,0.5)\",\r\n              \"rgba(255,0,0,0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\n// Chart.propTypes = {};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    console.log(\"CountryPicker.js useEffect called\");\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n  \r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect onChange={(e)=>{handleCountryChange(e.target.value)}}>\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country} >\r\n            {country} \r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// CountryPicker.propTypes = {};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/COVID.png\";\n\nfunction App() {\n  const [data, setData] = useState({\n    data: {},\n    country: \"\",\n  });\n  useEffect(() => {\n    console.log(\"App.js useEffect called\");\n    (async () => {\n      const result = await fetchData();\n      setData((data) => ({\n        ...data,\n        data: result,\n      }));\n    })();\n  }, []);\n\n  \n  const handleCountryChange = async (country) => {\n\n    const fetchedData = await fetchData(country);\n\n    setData((data) => ({\n      ...data,\n      data: fetchedData,\n      country: country,\n    }));\n  };\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\n      {Object.keys(data.data).length > 0 ? (\n        <Cards data={data.data} />\n      ) : (\n        \"Loading...\"\n      )}\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data.data} country={data.country} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__H0uL7\",\"image\":\"App_image__1Uzol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1BguO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__XvIch\"};","module.exports = __webpack_public_path__ + \"static/media/COVID.d7265326.png\";"],"sourceRoot":""}